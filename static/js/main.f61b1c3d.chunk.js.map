{"version":3,"sources":["Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","contacts","this","props","title","className","style","background","map","elem","index","key","React","Component","App","isWinner","s","state","cout","item","winnerLine","line","squares","setState","flag","status","defaultClass","setTimeout","gameReset","Array","fill","clickHandler","e","data","target","getAttribute","currentSqueres","Object","keys","block","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f61b1c3d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        let contacts = this.props.contacts;\r\n        let title = this.props.title;\r\n\r\n        return (\r\n            <footer\r\n                className=\"App section\"\r\n                style={{ background: \"#2d3246\" }}\r\n            >\r\n                <p >{title}</p>\r\n                {/* <p className=\"d-flex bd-highlight\"> Copyright by cxx_BY</p> */}\r\n                <ul className=\"d-flex bd-highlight\">\r\n                    {contacts.map((elem, index) => (\r\n                        <li className=\"p-2 flex-fill bd-highlight\" key={index}>{elem}</li>\r\n                    ))}\r\n                </ul>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Footer from './Footer';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      cout: 0,\r\n      flag: false,\r\n      status: 'Х начинает',\r\n      defaultClass: \"gameInfo\"\r\n\r\n    }\r\n    /**\r\n     * массив выйгрышных линий \r\n     */\r\n    this.winnerLine = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * метод определения победы или ничьей\r\n   */\r\n  isWinner = () => {\r\n    let s = (this.state.cout % 2 === 0) ? 'X' : 'O';\r\n\r\n    for (let item in this.winnerLine) {\r\n      let line = this.winnerLine[item];\r\n      if (this.state.squares[line[0]] === s\r\n        && this.state.squares[line[1]] === s\r\n        && this.state.squares[line[2]] === s) {\r\n        this.setState({ flag: true })\r\n        this.setState({ status: 'Победил: ' + s })\r\n        this.setState({ defaultClass: 'gameWin' })\r\n        setTimeout(this.gameReset, 3000);\r\n\r\n      }\r\n      else\r\n        if (this.state.cout === 8 && this.state.flag === false) {\r\n          this.setState({ status: 'Ничья!' });\r\n          this.setState({ defaultClass: 'gameOver' })\r\n          this.setState({ flag: true })\r\n          setTimeout(this.gameReset, 3000);\r\n        }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * сброс игры\r\n   */\r\n  gameReset = () => {\r\n    this.setState({ squares: Array(9).fill(null) });\r\n    this.setState({ cout: 0 });\r\n    this.setState({ flag: false });\r\n    this.setState({ status: 'Х начинает' });\r\n    this.setState({ defaultClass: 'gameInfo' })\r\n  }\r\n\r\n  /**\r\n   * состояние ячеек при клике\r\n  */\r\n  clickHandler = (e) => {\r\n\r\n    let data = e.target.getAttribute('data');\r\n    let currentSqueres = this.state.squares;\r\n\r\n    if (currentSqueres[data] === null && this.state.flag === false) {\r\n      if (this.state.cout % 2 === 0) {\r\n        currentSqueres[data] = 'X';\r\n        this.setState({ status: 'O ходит' })\r\n      } else {\r\n        currentSqueres[data] = 'O';\r\n        this.setState({ status: 'X ходит' })\r\n      }\r\n      this.setState({ cout: this.state.cout + 1 });\r\n      this.setState({ squares: currentSqueres });\r\n    } else {\r\n      this.setState({ status: 'Так нельзя!' })\r\n    }\r\n    this.isWinner();\r\n  }\r\n\r\n  render() {\r\n    let title = this.props.title;\r\n    let contacts = this.props.contacts;\r\n\r\n    return (\r\n      <div className='App App-header container '>\r\n        <h1 className='gameName'>{this.props.title}</h1>\r\n        < div className=\"Game\" > {\r\n          Object.keys(this.state.squares).map((block, index) => (< div className='block'\r\n            onClick={this.clickHandler} key={index} data={index}>\r\n            {this.state.squares[block]}</div>)\r\n          )}\r\n        </div>\r\n        <div className={this.state.defaultClass}>{this.state.status}</div>\r\n        <button className='gameReset button-primary button-round' onClick={this.gameReset}>Сброс игры</button>\r\n        <Footer title={title}\r\n          contacts={contacts}\r\n        />\r\n      </div>)\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nlet title = \"Крестики-Нолики\";\r\nlet contacts = ['Copyright by cxx_BY', \"+375298174777\", \"evgeny.cxx@gmail.com\"];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App title={title}\r\n      contacts={contacts}\r\n    />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}